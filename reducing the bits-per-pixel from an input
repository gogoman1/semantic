from PIL import Image
from bisect import bisect_right

def multi_level_threshold(image_path, num_groups):
    # Load the black and white image
    bw_image = Image.open(image_path).convert('L')

    # Handle the case for num_groups = 2 separately
    if num_groups == 2:
        # Directly convert the image to binary
        binary_image = bw_image.point(lambda x: 0 if x < 128 else 255, 'L')
    else:
        # Define thresholds for the specified number of groups
        thresholds = [i * (256 // num_groups) for i in range(1, num_groups)]

        # Function to apply multi-level thresholding
        def threshold_pixel(x):
            if x < thresholds[0]:
                return 0
            elif x >= thresholds[-1]:
                return 255
            else:
                index = bisect_right(thresholds, x)
                return index * (256 // num_groups)

        # Apply the function to each pixel in the image
        binary_image = bw_image.point(threshold_pixel)

    # Display or save the binary image
    binary_image.show()
    # If you want to save the binary image
    # binary_image.save(f'multi_threshold_binary_image_{num_groups}.jpg')

    return binary_image

# Example usage with 4 groups
image = multi_level_threshold('/content/bond_lineart.png', num_groups=8)
image
